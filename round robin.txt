#include <stdio.h>

#define MAX_PROCESSES 10

typedef struct {
    int process_id;
    int burst_time;
    int remaining_time;
} Process;

void roundRobin(Process processes[], int n, int time_quantum) {
    int i, completed = 0, current_time = 0;
  
    while (completed < n) {
        for (i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0) {
                if (processes[i].remaining_time <= time_quantum) {
                    current_time += processes[i].remaining_time;
                    processes[i].remaining_time = 0;
                    printf("Process %d completed at time %d\n", processes[i].process_id, current_time);
                    completed++;
                } else {
                    current_time += time_quantum;
                    processes[i].remaining_time -= time_quantum;
                    printf("Process %d executed for time quantum %d, remaining time %d\n",
                           processes[i].process_id, time_quantum, processes[i].remaining_time);
                }
            }
        }
    }
}

int main() {
    int n, i, time_quantum;
    Process processes[MAX_PROCESSES];

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter the burst time for each process:\n");
    for (i = 0; i < n; i++) {
        printf("Process %d: ", i+1);
        scanf("%d", &processes[i].burst_time);
        processes[i].remaining_time = processes[i].burst_time;
        processes[i].process_id = i+1;
    }

    printf("Enter the time quantum: ");
    scanf("%d", &time_quantum);

    roundRobin(processes, n, time_quantum);

    return 0;
}
